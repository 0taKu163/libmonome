#!/usr/bin/env python

top = ".."

def build(bld):
	bld(export_includes=".. private", name="lm_inc")
	objs = []
	obj = lambda src: objs.append(src)

	#
	# platform
	#

	if bld.env.DEST_OS == "linux":
		if bld.env.LIB_UDEV:
			obj("platform/linux_libudev.c")
		else:
			obj("platform/linux_sysfs.c")

		obj("platform/linux.c")
		obj("platform/posix.c")

	elif bld.env.DEST_OS == "darwin":
		obj("platform/darwin.c")
		obj("platform/posix.c")

	elif bld.env.DEST_OS == "windows":
		obj("platform/windows.c")

	#
	# protocols
	#

	opat = bld.env.cshlib_PATTERN
	if bld.env.cshlib_PATTERN[:3] == "lib":
		# don't always want "lib" before my lib names. grumble grumble.
		bld.env.cshlib_PATTERN = bld.env.cshlib_PATTERN[3:]

	for p in bld.env.PROTOCOLS:
		bld.shlib(source="proto/{0}.c".format(p), target="protocol_{0}".format(p), use="lm_inc")

	if bld.env.LIB_LO:
		bld.shlib(source="proto/osc.c", target="protocol_osc", use="lm_inc LO")

	bld.env.cshlib_PATTERN = opat

	#
	# common
	#

	obj("rotation.c")
	obj("libmonome.c")

	# the UDEV use is ignored if it is not defined
	bld.shlib(
		source=objs,
		target="monome",

		use="lm_inc UDEV",
		vnum=bld.env.VERSION)

	if bld.env.LIB_LO:
		bld.program(
			source="monomeserial.c",
			target="monomeserial",

			use="lm_inc monome LO")
